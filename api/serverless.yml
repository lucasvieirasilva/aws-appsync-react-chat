service: appsync-chat

plugins:
  - serverless-appsync-plugin
  - serverless-static-website-plugin

provider:
  name: aws
  region: us-east-1

custom:
  s3LocalPath: ../client/build
  appSync:
    name: chat-api
    serviceRole: 'AppSyncServiceRole'
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
      userPoolId: 
        Ref: CognitoUserPoolAppSync
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL
    mappingTemplates:
      - dataSource: Messages
        type: Mutation
        field: createMessage
        request: "createMessage-request-mapping-template.txt"
        response: "createMessage-response-mapping-template.txt"
      - dataSource: Messages
        type: Query
        field: getMessages
        request: "getMessages-request-mapping-template.txt"
        response: "getMessages-response-mapping-template.txt"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Messages
        description: 'AppSync Chat Messages Table'
        config:
          tableName: { Ref: ChatMessagesTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }

resources:
  Resources:
    # WebSite
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: 
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    { "Ref": "WebAppS3Bucket" },
                    "/*"
                  ]
                ]
              
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::Join: [
                  "", [
                    { "Ref": "WebAppS3Bucket" },
                    ".s3.amazonaws.com"
                  ]
                ]
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: true
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'


    ChatMessagesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: messageId
            KeyType: HASH
          -
            AttributeName: createdAt
            KeyType: RANGE
        AttributeDefinitions:
          -
            AttributeName: messageId
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'AppSyncChatMessages'

    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Dynamo-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - Fn::Join: [ '', [ 'arn:aws:dynamodb:', Ref: AWS::Region, ':', Ref: AWS::AccountId, ':table/AppSyncChatMessages' ] ]
                    - Fn::Join: [ '', [ 'arn:aws:dynamodb:', Ref: AWS::Region, ':', Ref: AWS::AccountId, ':table/AppSyncChatMessages/*' ] ]

    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: Logging-${self:custom.appSync.serviceRole}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - 
            PolicyName: Logging-${self:custom.appSync.serviceRole}-Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement: 
                - 
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                    - logs:CreateLogStream
                  Resource: '*'

    CognitoUserPoolAppSync:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: appsync-pool
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true

    ReactAppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        GenerateSecret: false
        RefreshTokenValidity: 200
        UserPoolId:
          Ref: CognitoUserPoolAppSync

  Outputs:
    WebAppS3BucketOutput:
      Value:
        'Ref': WebAppS3Bucket

    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]